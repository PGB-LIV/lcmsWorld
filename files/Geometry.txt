R"(
#version 150 core

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

in float Valpha[3];
out float ValphaF;

in vec2 UV[3];
out vec2 UVF;

flat in  vec3 Normal_cameraspace[3];
flat out vec3 Normal_cameraspaceF;

in vec3 Position_worldspace[3];
out vec3 Position_worldspaceF;


in vec3 EyeDirection_cameraspace[3];
in vec3 LightDirection_cameraspace[3];

out vec3 EyeDirection_cameraspaceF;
out vec3 LightDirection_cameraspaceF;

 in float vertexAttributeI[3];
out float vertexAttributeIF;


uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightPosition_worldspace;
uniform vec2 xFilter;
uniform vec2 yFilter;
uniform	float LightPower;


void main() 
{

	vec3 ab = gl_in[1].gl_Position.xyz - gl_in[0].gl_Position.xyz;
	vec3 ac = gl_in[2].gl_Position.xyz - gl_in[0].gl_Position.xyz;
	vec3 normal = normalize(cross(ab, ac));
 
 
 	vec3 Normal_cameraspaceG = ( V * M * vec4(normal,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	Normal_cameraspaceG = vec3(0,0,0) - Normal_cameraspaceG;

 

  for(int i = 0; i < 3; i++) 
  {  
    gl_Position = gl_in[i].gl_Position;

	ValphaF = Valpha[i];
	UVF=UV[i];

	// Normal_cameraspaceF = Normal_cameraspace;
	Normal_cameraspaceF  = Normal_cameraspace[0];
	Position_worldspaceF = Position_worldspace[i];

	EyeDirection_cameraspaceF = EyeDirection_cameraspace[i];
	LightDirection_cameraspaceF = LightDirection_cameraspace[i];
	vertexAttributeIF = vertexAttributeI[i];

    EmitVertex();
  }

  EndPrimitive();
}

)";
