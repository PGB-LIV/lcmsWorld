R"(
#version 130

// Interpolated values from the vertex shaders
in  vec2 UV;
flat in vec3 Normal_cameraspace;
in vec3 Position_worldspace;
in float Valpha;

in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in float vertexAttributeI;


out vec4  FragColor;

// Values that stay constant for the whole mesh.
uniform sampler2D TextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform float alpha;
uniform float zFilter;
uniform float ambient;
uniform float zHighlightFilter;
uniform	float LightPower;
uniform float zScale;

void main(){

	if (Position_worldspace.y < zFilter)
		discard;

 


			vec2 inUV = UV;

	//		FragColor =vec4(MaterialDiffuseColor,Valpha);
			if (true)
			{

	// Light emission properties
	// You probably want to pass them as input

	vec3 LightColor = vec3(1,1,1);
	 




	// highlighted parts just have texture flipped left/right
	 	if ((Position_worldspace.y > zHighlightFilter) && (vertexAttributeI > 0.5) )

 
	{
		inUV.x = 1 -inUV.x;
	}

	//		inUV.y = inUV.y * zScale;

	// Material properties
		vec3 MaterialDiffuseColor = texture( TextureSampler, inUV ).rgb;

	vec3 MaterialAmbientColor = vec3(ambient,ambient,ambient) * MaterialDiffuseColor;


	if (LightPower > 1)
	{

	vec3 MaterialSpecularColor = vec3(ambient,ambient,ambient) *0.4;

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace ) / 5000;

	// Normal of the computed fragment, in camera space
 
		vec3 n = normalize( Normal_cameraspace );

	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

	 
	
	FragColor.rgb = 
	(
		// Ambient : simulates indirect lighting
 		MaterialAmbientColor 
		// Diffuse : "color" of the object
	+	MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) 
		// Specular : reflective highlight, like a mirror
 	+	MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance) 
);

}
else
{
	FragColor.rgb = 
	(
		// Ambient : simulates indirect lighting
 		MaterialAmbientColor 
		 
	
		);
}
	FragColor.a = alpha * Valpha *texture( TextureSampler, inUV ).a;
}


}

)";
